import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.naive_bayes import CategoricalNB

# Step 1: Define the dataset
weather = ['Sunny', 'Sunny', 'Overcast', 'Rainy', 'Rainy', 'Rainy', 'Overcast', 'Sunny', 'Sunny', 'Rainy', 'Sunny', 'Overcast', 'Overcast', 'Rainy']
temp = ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild']
play = ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']

# Step 2: Encode the categorical features and target variable
label_encoder_weather = LabelEncoder()
label_encoder_temp = LabelEncoder()
label_encoder_play = LabelEncoder()

# Fit and transform the data to numerical values
weather_encoded = label_encoder_weather.fit_transform(weather)  # Weather to numbers
temp_encoded = label_encoder_temp.fit_transform(temp)  # Temp to numbers
play_encoded = label_encoder_play.fit_transform(play)  # Play ('Yes' or 'No') to numbers

# Combine weather and temp as feature set
features = np.array(list(zip(weather_encoded, temp_encoded)))

# Step 3: Train the Naive Bayes model
model = CategoricalNB()
model.fit(features, play_encoded)

# Step 4: Make a prediction for the tuple [Overcast, Mild]
# First, encode 'Overcast' and 'Mild' into their numerical form using the encoders
weather_test = label_encoder_weather.transform(['Overcast'])[0]
temp_test = label_encoder_temp.transform(['Mild'])[0]

# Predict the class
predicted = model.predict([[weather_test, temp_test]])

# Decode the predicted value back to 'Yes' or 'No'
predicted_class = label_encoder_play.inverse_transform(predicted)

# Step 5: Output the result
print(f"The predicted class for [Overcast, Mild] is: {predicted_class[0]}")
