# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Step 1: Load the dataset
# Replace the URL with the actual path of the dataset on your local machine or a URL
url = 'https://raw.githubusercontent.com/path_to_dataset/CC GENERAL.csv'  # Use raw GitHub link or local path
data = pd.read_csv(url)

# Step 2: Explore the dataset
print(data.head())
print(data.info())

# Step 3: Data preprocessing
# Check for missing values
print(data.isnull().sum())

# Drop the 'CUST_ID' column as it is not useful for clustering
data = data.drop(['CUST_ID'], axis=1)

# Optional: Replace any missing values with the median
data.fillna(data.median(), inplace=True)

# Step 4: Normalize the features
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

# Step 5: Apply K-means clustering
# Use the elbow method to find the optimal number of clusters
wcss = []  # Within-cluster sum of squares
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(data_scaled)
    wcss.append(kmeans.inertia_)

# Step 6: Plot the elbow graph
plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wcss, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.grid()
plt.show()

# Based on the elbow method, let's assume we found the optimal number of clusters to be 4
optimal_clusters = 4
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
data['Cluster'] = kmeans.fit_predict(data_scaled)

# Step 7: Visualize the clusters using PCA for dimensionality reduction
pca = PCA(n_components=2)
data_pca = pca.fit_transform(data_scaled)

plt.figure(figsize=(10, 6))
plt.scatter(data_pca[:, 0], data_pca[:, 1], c=data['Cluster'], cmap='viridis', alpha=0.5)
plt.title('Clusters of Credit Card Customers')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.colorbar(label='Cluster')
plt.show()
