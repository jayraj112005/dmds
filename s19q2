# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Step 1: Load the dataset
url = "https://www.w3schools.com/python/datasets/cars.csv"
data = pd.read_csv(url)

# Step 2: Display the first few rows of the dataset
print("Car Dataset:")
print(data.head())

# Step 3: Prepare the data for multiple linear regression
# Define features (independent variables) and target variable (dependent variable)
# Let's assume we want to predict 'Price' based on 'Year', 'Mileage', and 'HP'
X = data[['Year', 'Mileage', 'HP']]  # Features
y = data['Price']                     # Target variable

# Step 4: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Create and fit the Multiple Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 6: Make predictions on the test set
y_pred = model.predict(X_test)

# Step 7: Evaluate the model's performance
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"\nEstimated coefficients:\nIntercept: {model.intercept_}\nCoefficients: {model.coef_}")
print(f"\nPerformance Metrics:")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Optional: Visualize the results (Only for one feature at a time for simplicity)
plt.figure(figsize=(10, 6))
plt.scatter(X_test['Year'], y_test, color='blue', label='Actual Prices', alpha=0.5)
plt.scatter(X_test['Year'], y_pred, color='red', label='Predicted Prices', marker='x')
plt.title('Actual vs Predicted Car Prices')
plt.xlabel('Year')
plt.ylabel('Price')
plt.legend()
plt.grid()
plt.show()
